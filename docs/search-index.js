var searchIndex = JSON.parse('{\
"debug_print":{"doc":"This crate provide prints macros that are not compiled in …","t":[14,14,14,14],"n":["debug_eprint","debug_eprintln","debug_print","debug_println"],"q":["debug_print","","",""],"d":["Prints to the standard error only in debug build. In …","Prints to the standard error only in debug build. In …","Prints to the standard ouput only in debug build. In …","Prints to the standard ouput only in debug build. In …"],"i":[0,0,0,0],"f":[null,null,null,null],"p":[]},\
"matrs":{"doc":"What is this?","t":[0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,10,10,10,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["matrix","traits","vec","Matrix","add","borrow","borrow_mut","clone","clone_into","eq","fmt","from","get","get_mut","gradient","into","mul","mul","ne","new","new_from_data","set","sub","to_f32","to_f64","to_owned","transpose","try_from","try_into","type_id","CompliantNumerical","into_f32","into_f64","into_i16","into_i32","into_i64","into_i8","into_u16","into_u32","into_u64","into_u8","Vec","add","borrow","borrow_mut","clone","clone_into","div","eq","fmt","for_each","from","get","get_mut","into","iter","iter_mut","len","mul","mul","mul","ne","new","new_from_data","set","sub","to_owned","try_from","try_into","type_id"],"q":["matrs","","","matrs::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","matrs::traits","","","","","","","","","","","matrs::vec","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This files defines a generic matrix struct, it is used to …","This defines what type of variables are valid for the …","A vector is of n elements, and is stored in a contiguous …","","What is this?","","","","","","","Returns the argument unchanged.","Get the value of the element at the given row and column","Returns a mutable reference to the element at the given …","Defines a gradient method for the generic matrix struct","Calls <code>U::from(self)</code>.","What is this?","","","Creates a new matrix of the specified size","Instantiantes a new matrix with the given elements","Sets the value of a given element in the matrix","What is this?","Converts an integer matrix to a float32 matrix","Converts an integer matrix to a float64 matrix","","Transposes a given matrix, since we can’t assume the …","","","","Defines a compliant numerical trait It is used as a …","","","","","","","","","","","Type definition for a vector It is a fixed size vector It …","This function adds two vectors Since vectors are allocated …","","","","","Divides a vector with a scalar","","","Passes each element of the vector to the function","Returns the argument unchanged.","Gets the element at the specified index","Sets the element at the specified index","Calls <code>U::from(self)</code>.","Convert the vector to a slice","Convert the vector to a slice","Gets the length of the vector","","","","","Creates a new vector It is used to create a new vector …","Creates a new vector It is used to create a new vector …","Sets the element at the specified index","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[null,null,null,null,[[["matrix",3]],["matrix",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["matrix",3]],[[["",0],["",0]]],[[["",0],["matrix",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["usize",0],["usize",0]],["",0]],[[["",0],["usize",0],["usize",0]],["",0]],[[["",0]],["matrix",3]],[[]],[[["matrix",3]],["matrix",3]],[[],["matrix",3]],[[["",0],["matrix",3]],["bool",0]],[[],["matrix",3]],[[],["matrix",3]],[[["",0],["usize",0],["usize",0]]],[[["matrix",3]],["matrix",3]],[[["",0]],["matrix",3,[["f32",0]]]],[[["",0]],["matrix",3,[["f64",0]]]],[[["",0]]],[[["",0]],["matrix",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[],["f32",0]],[[],["f64",0]],[[],["i16",0]],[[],["i32",0]],[[],["i64",0]],[[],["i8",0]],[[],["u16",0]],[[],["u32",0]],[[],["u64",0]],[[],["u8",0]],null,[[["vec",3]],["vec",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vec",3]],[[["",0],["",0]]],[[],["vec",3]],[[["",0],["vec",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0]]],[[]],[[["",0],["usize",0]],["",0]],[[["",0],["usize",0]],["",0]],[[]],[[["",0]],["iter",3]],[[["",0]],["itermut",3]],[[["",0]],["usize",0]],[[],["vec",3]],[[["vec",3]],["vec",3]],[[["matrix",3]],["vec",3]],[[["",0],["vec",3]],["bool",0]],[[],["vec",3]],[[],["vec",3]],[[["",0],["usize",0]]],[[["vec",3]],["vec",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Matrix"],[8,"CompliantNumerical"],[3,"Vec"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};